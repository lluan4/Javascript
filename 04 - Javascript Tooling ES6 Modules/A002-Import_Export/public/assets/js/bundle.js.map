{"version":3,"file":"bundle.js","mappings":"4yBA0DA,IA6FMA,EAAQ,IA3FL,WAOL,SAAAC,K,4FAAcC,CAAA,KAAAD,GAAAE,EAAA,WANR,IAAEA,EAAA,qBACQ,GAACA,EAAA,sBACD,GAACA,EAAA,8BACQ,GAACA,EAAA,+BACA,GAGtBC,KAAKC,IAAM,GACXD,KAAKE,aACT,C,QA4EC,O,EA5EAL,E,EAAA,EAAAM,IAAA,eAAAC,MAED,WAAsB,IAATC,EAAGC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,EACf,OAAOG,KAAKC,MAAMD,KAAKE,SAAWN,EACtC,GAAC,CAAAF,IAAA,cAAAC,MAED,WAEI,IAAK,IAAIQ,EAAQ,EAAGA,EAAQ,EAAGA,IAC3BZ,KAAKC,IAAIY,KAAKb,KAAKc,gBAGvB,OAA+B,IAA3Bd,KAAKe,oBAMyB,IAA9Bf,KAAKgB,sBALLhB,KAAKC,IAAM,QACXD,KAAKE,gBAUTF,KAAKiB,sBACLjB,KAAKkB,4BACLlB,KAAKC,IAAOD,KAAKC,IAAIkB,KAAK,KAC9B,GAAC,CAAAhB,IAAA,kBAAAC,MAGD,WACI,IAAK,IAAIgB,EAAI,EAAGA,EAAIpB,KAAKC,IAAIM,OAAQa,IAAK,CACtC,GAAIC,SAASrB,KAAKC,IAAImB,EAAI,KAAOC,SAASrB,KAAKC,IAAImB,GAAK,GACrD,OAAO,EAGV,GAAIC,SAASrB,KAAKC,IAAImB,EAAI,KAAOC,SAASrB,KAAKC,IAAImB,GAAK,GACpD,OAAO,CAEf,CACA,OAAO,CACX,GAAC,CAAAjB,IAAA,qBAAAC,MAED,WACI,IAAK,IAAIgB,EAAI,EAAGA,EAAIpB,KAAKC,IAAIM,OAAQa,IACjC,GAAIC,SAASrB,KAAKC,IAAImB,EAAI,KAAOC,SAASrB,KAAKC,IAAImB,IAChD,OAAO,EAGd,OAAO,CACX,GAAC,CAAAjB,IAAA,sBAAAC,MAED,WAAsB,IAAAkB,EAAA,KAClBtB,KAAKC,IAAIsB,SAAQ,SAACnB,EAAOQ,GACrBU,EAAKE,eAAiBpB,GAAS,GAAKQ,EACxC,IAEAZ,KAAKyB,uBAAyBzB,KAAKwB,cAAgB,GACf,IAAhCxB,KAAKyB,wBAAgE,IAAhCzB,KAAKyB,uBAC1CzB,KAAKC,IAAIY,KAAK,GAEdb,KAAKC,IAAIY,KAAK,GAAKb,KAAKyB,uBAEhC,GAAC,CAAAtB,IAAA,uBAAAC,MAED,WAAuB,IAAAsB,EAAA,KACnB1B,KAAKC,IAAIsB,SAAQ,SAACnB,EAAOQ,GACV,IAAVA,IAAcc,EAAKC,gBAAkBvB,GAAS,GAAKQ,GACxD,IAEAZ,KAAK4B,wBAA0B5B,KAAK2B,eAAiB,GAChB,IAAjC3B,KAAK4B,yBAAkE,IAAjC5B,KAAK4B,wBAC3C5B,KAAKC,IAAIY,KAAK,GAEdb,KAAKC,IAAIY,KAAK,GAAKb,KAAK4B,wBAEhC,I,uEAAC/B,CAAA,CAtFI,IA4FTgC,QAAQC,IAAIlC,EAAMK,I","sources":["webpack://javascript_tooling_es6_modules/./src/index.js"],"sourcesContent":["// import { nome as nome2, sobrenome, idade, soma } from './modulo1';\r\n// const nome = 'João';\r\n// console.log(nome, sobrenome, idade);\r\n// console.log(nome2);\r\n\r\n/* ********************************************************************** */\r\n\r\n// Model 2\r\n\r\n// import { nome2, sobrenome, idade, soma } from './modulo1';\r\n// const nome = 'João';\r\n// console.log(nome, sobrenome, idade);\r\n// console.log(nome2);\r\n\r\n/* ********************************************************************** */\r\n\r\n// Model 3\r\n\r\n// import { nome as nome2, sobrenome, idade, soma, Pessoa } from './modulo1';\r\n// const p1 = new Pessoa('Luan', 'Lima');\r\n// console.log(p1);\r\n\r\n/* ********************************************************************** */\r\n\r\n// Model 3.1\r\n\r\n// import { nome as nome2, sobrenome, idade, soma, Pessoa as OutraCoisa} from './modulo1';\r\n// const p1 = new OutraCoisa('Luan', 'Lima2');\r\n// console.log(p1);\r\n\r\n/* ********************************************************************** */\r\n\r\n// Model 4\r\n\r\n// import * as MeuModulo from './modulo1';\r\n// console.log(MeuModulo);\r\n\r\n/* ********************************************************************** */\r\n\r\n// Model 5\r\n\r\n// import qualquerNome from './modulo1';\r\n// console.log(qualquerNome(5, 5));\r\n\r\n/* ********************************************************************** */\r\n\r\n// Model 6\r\n\r\n// import soma from './modulo1';\r\n\r\n// console.log(soma);\r\n\r\n/* ********************************************************************** */\r\n\r\n// import { nome as nome2, sobrenome, idade, soma } from './modulo1';\r\n// const nome = 'João';\r\n\r\n// console.log(nome, sobrenome, idade);\r\n// console.log(nome2);\r\n\r\nclass CPF {\r\n    cpf = [];\r\n    sumFirstDigit = 0;\r\n    sumSecondDigit= 0;\r\n    restDivisionFirstDigit = 0;\r\n    restDivisionSecondDigit = 0;\r\n\r\n    constructor() {\r\n        this.cpf = [];\r\n        this.generateCPF();\r\n    }\r\n\r\n    getRandomInt(max = 9) {\r\n        return Math.floor(Math.random() * max);\r\n    }\r\n\r\n    generateCPF () {\r\n\r\n        for (let index = 0; index < 9; index++) {\r\n            this.cpf.push(this.getRandomInt())\r\n        }\r\n\r\n        if (this.isCPFSequential() === true){\r\n            this.cpf = [];\r\n            this.generateCPF();\r\n            return;\r\n        }\r\n\r\n        if (this.isCPFHaveDuplicate() === true){\r\n            this.cpf = [];\r\n            this.generateCPF();\r\n            return;\r\n        }\r\n\r\n        this.firstDigitCalculate();\r\n        this.secondDigitCalculate();\r\n        this.cpf =  this.cpf.join(\"\");\r\n    }\r\n\r\n\r\n    isCPFSequential() {\r\n        for (let i = 0; i < this.cpf.length; i++) {\r\n            if (parseInt(this.cpf[i + 1]) == parseInt(this.cpf[i] + 1)){\r\n               return true\r\n            }\r\n\r\n            if (parseInt(this.cpf[i + 1]) == parseInt(this.cpf[i] - 1)){\r\n                return true\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    isCPFHaveDuplicate() {\r\n        for (let i = 0; i < this.cpf.length; i++) {\r\n            if (parseInt(this.cpf[i + 1]) == parseInt(this.cpf[i])){\r\n               return true\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    firstDigitCalculate() {\r\n        this.cpf.forEach((value, index) => {\r\n            this.sumFirstDigit += value * (10 - index);\r\n        })\r\n        \r\n        this.restDivisionFirstDigit = this.sumFirstDigit % 11;\r\n        if (this.restDivisionFirstDigit === 0 || this.restDivisionFirstDigit === 1){\r\n            this.cpf.push(0);\r\n        } else {\r\n            this.cpf.push(11 - this.restDivisionFirstDigit);\r\n        }\r\n    }\r\n\r\n    secondDigitCalculate() {\r\n        this.cpf.forEach((value, index) => {\r\n            (index !== 0)? this.sumSecondDigit += value * (11 - index):null;\r\n        })\r\n        \r\n        this.restDivisionSecondDigit = this.sumSecondDigit % 11;\r\n        if (this.restDivisionSecondDigit === 0 || this.restDivisionSecondDigit === 1){\r\n            this.cpf.push(0);\r\n        } else {\r\n            this.cpf.push(11 - this.restDivisionSecondDigit);\r\n        }\r\n    }\r\n\r\n}\r\n\r\n\r\nconst teste = new CPF;\r\nconsole.log(teste.cpf);\r\n"],"names":["teste","CPF","_classCallCheck","_defineProperty","this","cpf","generateCPF","key","value","max","arguments","length","undefined","Math","floor","random","index","push","getRandomInt","isCPFSequential","isCPFHaveDuplicate","firstDigitCalculate","secondDigitCalculate","join","i","parseInt","_this","forEach","sumFirstDigit","restDivisionFirstDigit","_this2","sumSecondDigit","restDivisionSecondDigit","console","log"],"sourceRoot":""}